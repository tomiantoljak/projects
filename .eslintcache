[{"/Users/tomiant/tinder-clone/src/index.js":"1","/Users/tomiant/tinder-clone/src/App.js":"2","/Users/tomiant/tinder-clone/src/reportWebVitals.js":"3","/Users/tomiant/tinder-clone/src/Header.js":"4","/Users/tomiant/tinder-clone/src/TinderCards.js":"5","/Users/tomiant/tinder-clone/src/firebase.js":"6","/Users/tomiant/tinder-clone/src/SwipeButtons.js":"7","/Users/tomiant/tinder-clone/src/Chats.js":"8","/Users/tomiant/tinder-clone/src/Chat.js":"9","/Users/tomiant/tinder-clone/src/ChatScreen.js":"10"},{"size":500,"mtime":1611833357572,"results":"11","hashOfConfig":"12"},{"size":1413,"mtime":1611922316251,"results":"13","hashOfConfig":"12"},{"size":388,"mtime":1611835027251,"results":"14","hashOfConfig":"12"},{"size":4932,"mtime":1611917999736,"results":"15","hashOfConfig":"12"},{"size":2299,"mtime":1611928042165,"results":"16","hashOfConfig":"12"},{"size":679,"mtime":1611845718909,"results":"17","hashOfConfig":"12"},{"size":1018,"mtime":1611913663194,"results":"18","hashOfConfig":"12"},{"size":1455,"mtime":1611925838573,"results":"19","hashOfConfig":"12"},{"size":624,"mtime":1611927725717,"results":"20","hashOfConfig":"12"},{"size":2197,"mtime":1611929341350,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1caxsbv",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tomiant/tinder-clone/src/index.js",[],["46","47"],"/Users/tomiant/tinder-clone/src/App.js",[],"/Users/tomiant/tinder-clone/src/reportWebVitals.js",[],["48","49"],"/Users/tomiant/tinder-clone/src/Header.js",[],"/Users/tomiant/tinder-clone/src/TinderCards.js",["50"],"import { PersonSharp } from \"@material-ui/icons\";\nimport React, { useState, useEffect } from \"react\";\nimport TinderCard from 'react-tinder-card';\nimport database from \"./firebase\";\nimport \"./TinderCards.css\";\n\n\nfunction TinderCards() {\n    // this is the same as people = []\n    // it's just we're renaming the way we want to reset this state\n    // that's the fundamental core of react – changing states of components\n    const [people, setPeople] = useState([]);\n    // setPeople([...people,\"sanni\",\"kozi\"]);\n    // runs something based on condition\n    // empty brackets mean that it'll only run once\n    // if there is something in it then it updates every time the variable inside changes\n    // onSnapshot – think of it as taking a picture of a database\n    // setPeople updates const people\n    // we map each doc (with autokey) and then spit out its data\n    // that data is esentially object with key, value pairs being name: \"sth\" and url: \"sth\"\n    // you want assign a constant that'll update database content BEFORE useEffect happens\n    // and you do that by return() => {unsubscribe()} so that it updates before we execute the listener\n    // we can call unsubscribe because database.collection is a function which we assigned to unsubscribed variable\n    useEffect(() => {\n        const unsubscribe = database.collection('people').onSnapshot(snapshot => \n            setPeople(snapshot.docs.map(person => person.data()))\n        );\n\n        return () => {\n            unsubscribe();\n        }\n\n    }, [people]);\n    \n    // always add key to component because it allows react to efficiently re-render list\n    return (\n        <div>\n            <div class=\"tinder-cards-container\">\n                {people.map(person => (\n                    <TinderCard \n                    className=\"swipe\"\n                    key={person.name}\n                    preventSwipe={[\"up\", \"down\"]}\n                    >\n                        <div \n                        className=\"card\"\n                        style={{ backgroundImage: `url(${person.url})`}}\n                        >\n                            <h3>{person.name}</h3>\n                        </div>\n                    </TinderCard>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default TinderCards;","/Users/tomiant/tinder-clone/src/firebase.js",[],"/Users/tomiant/tinder-clone/src/SwipeButtons.js",[],["51","52"],"/Users/tomiant/tinder-clone/src/Chats.js",[],"/Users/tomiant/tinder-clone/src/Chat.js",[],"/Users/tomiant/tinder-clone/src/ChatScreen.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"53","replacedBy":"57"},{"ruleId":"55","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":10,"nodeType":"61","messageId":"62","endLine":1,"endColumn":21},{"ruleId":"53","replacedBy":"63"},{"ruleId":"55","replacedBy":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],["65"],["66"],"no-unused-vars","'PersonSharp' is defined but never used.","Identifier","unusedVar",["65"],["66"],"no-global-assign","no-unsafe-negation"]